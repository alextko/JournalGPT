import type { PasswordSettingsData } from '@clerk/types';
type ComplexityErrorMessages = {
    [key in keyof Partial<Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>>]: string;
};
type UsePasswordComplexityConfig = Omit<PasswordSettingsData, 'disable_hibp' | 'min_zxcvbn_strength' | 'show_zxcvbn'>;
type UsePasswordComplexityCbs = {
    onValidationFailed?: (validationErrorMessages: ComplexityErrorMessages, errorMessage: string) => void;
    onValidationSuccess?: () => void;
};
export declare const usePasswordComplexity: (config: UsePasswordComplexityConfig, callbacks?: UsePasswordComplexityCbs) => {
    password: string;
    passwordComplexity: {
        max_length: boolean;
        min_length: boolean;
        require_numbers: boolean;
        require_lowercase: boolean;
        require_uppercase: boolean;
        require_special_char: boolean;
    };
    setPassword: (password: string) => {
        failedValidationsText: string;
    };
    failedValidations: ComplexityErrorMessages | undefined;
    failedValidationsText: string;
    hasPassedComplexity: boolean;
    hasFailedComplexity: boolean;
};
export {};
